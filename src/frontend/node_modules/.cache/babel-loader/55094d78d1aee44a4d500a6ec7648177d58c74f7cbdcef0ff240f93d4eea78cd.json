{"ast":null,"code":"// previewCapture.ts\n// SOLID: Single Responsibility - Capture live preview elements\nimport html2canvas from'html2canvas';export class CanvasPreviewCapture{/**\n   * Capture strip element using html2canvas\n   */async captureStripElement(element){try{console.log('ðŸ“¸ Capturing live preview strip...');// Ensure debug overlays are hidden during capture\nwindow.__CAPTURE_MODE__=true;// Use html2canvas to capture the strip element\nconst canvas=await html2canvas(element,{useCORS:true,// Allow cross-origin images\nallowTaint:true,// Allow tainted canvas\nlogging:false// Disable console logging\n});// Convert canvas to base64 data URL\nconst dataURL=canvas.toDataURL('image/png');console.log('âœ… Live preview strip captured successfully');console.log('ðŸ“Š Canvas dimensions:',canvas.width,'x',canvas.height);console.log('ðŸ“Š Data URL length:',dataURL.length);// Reset capture flag\ndelete window.__CAPTURE_MODE__;return dataURL;}catch(error){console.error('Error capturing live preview strip:',error);throw error;}}}","map":{"version":3,"names":["html2canvas","CanvasPreviewCapture","captureStripElement","element","console","log","window","__CAPTURE_MODE__","canvas","useCORS","allowTaint","logging","dataURL","toDataURL","width","height","length","error"],"sources":["/Users/shawnlee/Documents/GitHub/passes-mktr/src/frontend/src/services/previewCapture.ts"],"sourcesContent":["// previewCapture.ts\n// SOLID: Single Responsibility - Capture live preview elements\n\nimport { PreviewCapture } from '../types/stripInterfaces';\nimport html2canvas from 'html2canvas';\n\nexport class CanvasPreviewCapture implements PreviewCapture {\n  /**\n   * Capture strip element using html2canvas\n   */\n  async captureStripElement(element: HTMLElement): Promise<string> {\n    try {\n      console.log('ðŸ“¸ Capturing live preview strip...');\n      \n      // Ensure debug overlays are hidden during capture\n      (window as any).__CAPTURE_MODE__ = true;\n\n      // Use html2canvas to capture the strip element\n      const canvas = await html2canvas(element, {\n        useCORS: true, // Allow cross-origin images\n        allowTaint: true, // Allow tainted canvas\n        logging: false // Disable console logging\n      });\n      \n      // Convert canvas to base64 data URL\n      const dataURL = canvas.toDataURL('image/png');\n      console.log('âœ… Live preview strip captured successfully');\n      console.log('ðŸ“Š Canvas dimensions:', canvas.width, 'x', canvas.height);\n      console.log('ðŸ“Š Data URL length:', dataURL.length);\n      \n      // Reset capture flag\n      delete (window as any).__CAPTURE_MODE__;\n\n      return dataURL;\n    } catch (error) {\n      console.error('Error capturing live preview strip:', error);\n      throw error;\n    }\n  }\n}\n"],"mappings":"AAAA;AACA;AAGA,MAAO,CAAAA,WAAW,KAAM,aAAa,CAErC,MAAO,MAAM,CAAAC,oBAA+C,CAC1D;AACF;AACA,KACE,KAAM,CAAAC,mBAAmBA,CAACC,OAAoB,CAAmB,CAC/D,GAAI,CACFC,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC,CAEjD;AACCC,MAAM,CAASC,gBAAgB,CAAG,IAAI,CAEvC;AACA,KAAM,CAAAC,MAAM,CAAG,KAAM,CAAAR,WAAW,CAACG,OAAO,CAAE,CACxCM,OAAO,CAAE,IAAI,CAAE;AACfC,UAAU,CAAE,IAAI,CAAE;AAClBC,OAAO,CAAE,KAAM;AACjB,CAAC,CAAC,CAEF;AACA,KAAM,CAAAC,OAAO,CAAGJ,MAAM,CAACK,SAAS,CAAC,WAAW,CAAC,CAC7CT,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC,CACzDD,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAEG,MAAM,CAACM,KAAK,CAAE,GAAG,CAAEN,MAAM,CAACO,MAAM,CAAC,CACtEX,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAEO,OAAO,CAACI,MAAM,CAAC,CAElD;AACA,MAAQ,CAAAV,MAAM,CAASC,gBAAgB,CAEvC,MAAO,CAAAK,OAAO,CAChB,CAAE,MAAOK,KAAK,CAAE,CACdb,OAAO,CAACa,KAAK,CAAC,qCAAqC,CAAEA,KAAK,CAAC,CAC3D,KAAM,CAAAA,KAAK,CACb,CACF,CACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}