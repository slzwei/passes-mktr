{"ast":null,"code":"// layoutCalculator.ts\n// SOLID: Single Responsibility - Calculate optimal layout for stamps\n\nexport class OptimizedLayoutCalculator {\n  /**\n   * Calculate optimal rows and columns using the same logic as live preview\n   */\n  calculateOptimalLayout(stampCount) {\n    // Tiered layout plan\n    if (stampCount <= 1) return {\n      rows: 1,\n      cols: Math.max(1, stampCount)\n    };\n    if (stampCount <= 5) return {\n      rows: 1,\n      cols: stampCount\n    };\n    if (stampCount <= 10) return {\n      rows: 2,\n      cols: 5\n    };\n    if (stampCount <= 12) return {\n      rows: 2,\n      cols: 6\n    };\n    if (stampCount <= 15) return {\n      rows: 3,\n      cols: 5\n    };\n    if (stampCount <= 18) return {\n      rows: 3,\n      cols: 6\n    };\n    if (stampCount <= 20) return {\n      rows: 3,\n      cols: 7\n    };\n    if (stampCount <= 24) return {\n      rows: 3,\n      cols: 8\n    };\n    if (stampCount <= 27) return {\n      rows: 3,\n      cols: 9\n    };\n    return {\n      rows: 3,\n      cols: 10\n    };\n  }\n}","map":{"version":3,"names":["OptimizedLayoutCalculator","calculateOptimalLayout","stampCount","rows","cols","Math","max"],"sources":["/Users/shawnlee/Documents/GitHub/passes-mktr/src/frontend/src/services/layoutCalculator.ts"],"sourcesContent":["// layoutCalculator.ts\n// SOLID: Single Responsibility - Calculate optimal layout for stamps\n\nimport { Layout, LayoutCalculator } from '../types/stripInterfaces';\nimport { STRIP_W_1X, STRIP_H_1X } from '../shared/stripConstants';\n\nexport class OptimizedLayoutCalculator implements LayoutCalculator {\n  /**\n   * Calculate optimal rows and columns using the same logic as live preview\n   */\n  calculateOptimalLayout(stampCount: number): Layout {\n    // Tiered layout plan\n    if (stampCount <= 1) return { rows: 1, cols: Math.max(1, stampCount) };\n    if (stampCount <= 5) return { rows: 1, cols: stampCount };\n    if (stampCount <= 10) return { rows: 2, cols: 5 };\n    if (stampCount <= 12) return { rows: 2, cols: 6 };\n    if (stampCount <= 15) return { rows: 3, cols: 5 };\n    if (stampCount <= 18) return { rows: 3, cols: 6 };\n    if (stampCount <= 20) return { rows: 3, cols: 7 };\n    if (stampCount <= 24) return { rows: 3, cols: 8 };\n    if (stampCount <= 27) return { rows: 3, cols: 9 };\n    return { rows: 3, cols: 10 };\n  }\n}\n"],"mappings":"AAAA;AACA;;AAKA,OAAO,MAAMA,yBAAyB,CAA6B;EACjE;AACF;AACA;EACEC,sBAAsBA,CAACC,UAAkB,EAAU;IACjD;IACA,IAAIA,UAAU,IAAI,CAAC,EAAE,OAAO;MAAEC,IAAI,EAAE,CAAC;MAAEC,IAAI,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEJ,UAAU;IAAE,CAAC;IACtE,IAAIA,UAAU,IAAI,CAAC,EAAE,OAAO;MAAEC,IAAI,EAAE,CAAC;MAAEC,IAAI,EAAEF;IAAW,CAAC;IACzD,IAAIA,UAAU,IAAI,EAAE,EAAE,OAAO;MAAEC,IAAI,EAAE,CAAC;MAAEC,IAAI,EAAE;IAAE,CAAC;IACjD,IAAIF,UAAU,IAAI,EAAE,EAAE,OAAO;MAAEC,IAAI,EAAE,CAAC;MAAEC,IAAI,EAAE;IAAE,CAAC;IACjD,IAAIF,UAAU,IAAI,EAAE,EAAE,OAAO;MAAEC,IAAI,EAAE,CAAC;MAAEC,IAAI,EAAE;IAAE,CAAC;IACjD,IAAIF,UAAU,IAAI,EAAE,EAAE,OAAO;MAAEC,IAAI,EAAE,CAAC;MAAEC,IAAI,EAAE;IAAE,CAAC;IACjD,IAAIF,UAAU,IAAI,EAAE,EAAE,OAAO;MAAEC,IAAI,EAAE,CAAC;MAAEC,IAAI,EAAE;IAAE,CAAC;IACjD,IAAIF,UAAU,IAAI,EAAE,EAAE,OAAO;MAAEC,IAAI,EAAE,CAAC;MAAEC,IAAI,EAAE;IAAE,CAAC;IACjD,IAAIF,UAAU,IAAI,EAAE,EAAE,OAAO;MAAEC,IAAI,EAAE,CAAC;MAAEC,IAAI,EAAE;IAAE,CAAC;IACjD,OAAO;MAAED,IAAI,EAAE,CAAC;MAAEC,IAAI,EAAE;IAAG,CAAC;EAC9B;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}