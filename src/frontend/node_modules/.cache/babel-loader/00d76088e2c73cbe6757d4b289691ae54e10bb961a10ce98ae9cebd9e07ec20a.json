{"ast":null,"code":"// dimensionCalculator.ts\n// SOLID: Single Responsibility - Calculate strip dimensions and positioning\nimport{STRIP_W_1X,STRIP_H_1X}from'../shared/stripConstants';export class OptimizedDimensionCalculator{// Maximum stamp size\nconstructor(layoutCalculator){this.layoutCalculator=layoutCalculator;// Default strip dimensions (Apple Wallet standard) - use shared constants\nthis.stripWidth=STRIP_W_1X;this.stripHeight=STRIP_H_1X;this.stripAspectRatio=this.stripWidth/this.stripHeight;// 2.604\n// Safe area configuration (matches live preview)\nthis.safeAreaRatio=0.75;// 75% of strip height\nthis.safeAreaPadding=0.125;// 12.5% top/bottom padding each\n// Gap configuration (tiered)\nthis.baseGapPx=6;// default, overridden per tier\n// Size constraints (tiered bounds at 1x)\nthis.minSizePx=10;// Minimum stamp size\nthis.maxSizePx=80;}/**\n   * Calculate dimensions and positioning (matches live preview exactly)\n   */calculateDimensions(stampCount){let scale=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;const{rows,cols}=this.layoutCalculator.calculateOptimalLayout(stampCount);// Calculate strip dimensions (matches live preview)\nconst stripHeight=this.stripHeight*scale;const stripWidth=this.stripWidth*scale;// Calculate safe area (matches live preview)\nconst safeAreaHeight=stripHeight*this.safeAreaRatio;const safeAreaPadding=stripHeight*this.safeAreaPadding;// Calculate gap (tiered)\nlet gap1x=6;if(stampCount<=10)gap1x=12;else if(stampCount<=20)gap1x=8;else gap1x=6;const adjustedGap=gap1x*scale;// Calculate stamp diameter (matches live preview logic)\nconst availableWidth=stripWidth-(cols-1)*adjustedGap;const availableHeight=safeAreaHeight-(rows-1)*adjustedGap;const diameterFromWidth=availableWidth/cols;const diameterFromHeight=availableHeight/rows;const targetDiameter=Math.min(diameterFromWidth,diameterFromHeight);// Clamp diameter (matches live preview)\nconst minSize=this.minSizePx*scale;const maxSize=this.maxSizePx*scale;const stampDiameter=Math.max(minSize,Math.min(maxSize,targetDiameter));return{rows,cols,stripWidth,stripHeight,safeAreaHeight,safeAreaPadding,adjustedGap,stampDiameter,scale};}}","map":{"version":3,"names":["STRIP_W_1X","STRIP_H_1X","OptimizedDimensionCalculator","constructor","layoutCalculator","stripWidth","stripHeight","stripAspectRatio","safeAreaRatio","safeAreaPadding","baseGapPx","minSizePx","maxSizePx","calculateDimensions","stampCount","scale","arguments","length","undefined","rows","cols","calculateOptimalLayout","safeAreaHeight","gap1x","adjustedGap","availableWidth","availableHeight","diameterFromWidth","diameterFromHeight","targetDiameter","Math","min","minSize","maxSize","stampDiameter","max"],"sources":["/Users/shawnlee/Documents/GitHub/passes-mktr/src/frontend/src/services/dimensionCalculator.ts"],"sourcesContent":["// dimensionCalculator.ts\n// SOLID: Single Responsibility - Calculate strip dimensions and positioning\n\nimport { StripDimensions, DimensionCalculator } from '../types/stripInterfaces';\nimport { LayoutCalculator } from '../types/stripInterfaces';\nimport { STRIP_W_1X, STRIP_H_1X } from '../shared/stripConstants';\n\nexport class OptimizedDimensionCalculator implements DimensionCalculator {\n  // Default strip dimensions (Apple Wallet standard) - use shared constants\n  private readonly stripWidth = STRIP_W_1X;\n  private readonly stripHeight = STRIP_H_1X;\n  private readonly stripAspectRatio = this.stripWidth / this.stripHeight; // 2.604\n  \n  // Safe area configuration (matches live preview)\n  private readonly safeAreaRatio = 0.75; // 75% of strip height\n  private readonly safeAreaPadding = 0.125; // 12.5% top/bottom padding each\n  \n  // Gap configuration (tiered)\n  private readonly baseGapPx = 6; // default, overridden per tier\n  \n  // Size constraints (tiered bounds at 1x)\n  private readonly minSizePx = 10; // Minimum stamp size\n  private readonly maxSizePx = 80; // Maximum stamp size\n\n  constructor(private layoutCalculator: LayoutCalculator) {}\n\n  /**\n   * Calculate dimensions and positioning (matches live preview exactly)\n   */\n  calculateDimensions(stampCount: number, scale = 1): StripDimensions {\n    const { rows, cols } = this.layoutCalculator.calculateOptimalLayout(stampCount);\n    \n    // Calculate strip dimensions (matches live preview)\n    const stripHeight = this.stripHeight * scale;\n    const stripWidth = this.stripWidth * scale;\n    \n    // Calculate safe area (matches live preview)\n    const safeAreaHeight = stripHeight * this.safeAreaRatio;\n    const safeAreaPadding = stripHeight * this.safeAreaPadding;\n    \n    // Calculate gap (tiered)\n    let gap1x = 6;\n    if (stampCount <= 10) gap1x = 12;\n    else if (stampCount <= 20) gap1x = 8;\n    else gap1x = 6;\n    const adjustedGap = gap1x * scale;\n    \n    // Calculate stamp diameter (matches live preview logic)\n    const availableWidth = stripWidth - (cols - 1) * adjustedGap;\n    const availableHeight = safeAreaHeight - (rows - 1) * adjustedGap;\n    \n    const diameterFromWidth = availableWidth / cols;\n    const diameterFromHeight = availableHeight / rows;\n    const targetDiameter = Math.min(diameterFromWidth, diameterFromHeight);\n    \n    // Clamp diameter (matches live preview)\n    const minSize = this.minSizePx * scale;\n    const maxSize = this.maxSizePx * scale;\n    const stampDiameter = Math.max(minSize, Math.min(maxSize, targetDiameter));\n    \n    return {\n      rows,\n      cols,\n      stripWidth,\n      stripHeight,\n      safeAreaHeight,\n      safeAreaPadding,\n      adjustedGap,\n      stampDiameter,\n      scale\n    };\n  }\n}\n"],"mappings":"AAAA;AACA;AAIA,OAASA,UAAU,CAAEC,UAAU,KAAQ,0BAA0B,CAEjE,MAAO,MAAM,CAAAC,4BAA4D,CAetC;AAEjCC,WAAWA,CAASC,gBAAkC,CAAE,MAApCA,gBAAkC,CAAlCA,gBAAkC,CAhBtD;AAAA,KACiBC,UAAU,CAAGL,UAAU,MACvBM,WAAW,CAAGL,UAAU,MACxBM,gBAAgB,CAAG,IAAI,CAACF,UAAU,CAAG,IAAI,CAACC,WAAW,CAAE;AAExE;AAAA,KACiBE,aAAa,CAAG,IAAI,CAAE;AAAA,KACtBC,eAAe,CAAG,KAAK,CAAE;AAE1C;AAAA,KACiBC,SAAS,CAAG,CAAC,CAAE;AAEhC;AAAA,KACiBC,SAAS,CAAG,EAAE,CAAE;AAAA,KAChBC,SAAS,CAAG,EAAE,CAE0B,CAEzD;AACF;AACA,KACEC,mBAAmBA,CAACC,UAAkB,CAA8B,IAA5B,CAAAC,KAAK,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CAC/C,KAAM,CAAEG,IAAI,CAAEC,IAAK,CAAC,CAAG,IAAI,CAAChB,gBAAgB,CAACiB,sBAAsB,CAACP,UAAU,CAAC,CAE/E;AACA,KAAM,CAAAR,WAAW,CAAG,IAAI,CAACA,WAAW,CAAGS,KAAK,CAC5C,KAAM,CAAAV,UAAU,CAAG,IAAI,CAACA,UAAU,CAAGU,KAAK,CAE1C;AACA,KAAM,CAAAO,cAAc,CAAGhB,WAAW,CAAG,IAAI,CAACE,aAAa,CACvD,KAAM,CAAAC,eAAe,CAAGH,WAAW,CAAG,IAAI,CAACG,eAAe,CAE1D;AACA,GAAI,CAAAc,KAAK,CAAG,CAAC,CACb,GAAIT,UAAU,EAAI,EAAE,CAAES,KAAK,CAAG,EAAE,CAAC,IAC5B,IAAIT,UAAU,EAAI,EAAE,CAAES,KAAK,CAAG,CAAC,CAAC,IAChC,CAAAA,KAAK,CAAG,CAAC,CACd,KAAM,CAAAC,WAAW,CAAGD,KAAK,CAAGR,KAAK,CAEjC;AACA,KAAM,CAAAU,cAAc,CAAGpB,UAAU,CAAG,CAACe,IAAI,CAAG,CAAC,EAAII,WAAW,CAC5D,KAAM,CAAAE,eAAe,CAAGJ,cAAc,CAAG,CAACH,IAAI,CAAG,CAAC,EAAIK,WAAW,CAEjE,KAAM,CAAAG,iBAAiB,CAAGF,cAAc,CAAGL,IAAI,CAC/C,KAAM,CAAAQ,kBAAkB,CAAGF,eAAe,CAAGP,IAAI,CACjD,KAAM,CAAAU,cAAc,CAAGC,IAAI,CAACC,GAAG,CAACJ,iBAAiB,CAAEC,kBAAkB,CAAC,CAEtE;AACA,KAAM,CAAAI,OAAO,CAAG,IAAI,CAACrB,SAAS,CAAGI,KAAK,CACtC,KAAM,CAAAkB,OAAO,CAAG,IAAI,CAACrB,SAAS,CAAGG,KAAK,CACtC,KAAM,CAAAmB,aAAa,CAAGJ,IAAI,CAACK,GAAG,CAACH,OAAO,CAAEF,IAAI,CAACC,GAAG,CAACE,OAAO,CAAEJ,cAAc,CAAC,CAAC,CAE1E,MAAO,CACLV,IAAI,CACJC,IAAI,CACJf,UAAU,CACVC,WAAW,CACXgB,cAAc,CACdb,eAAe,CACfe,WAAW,CACXU,aAAa,CACbnB,KACF,CAAC,CACH,CACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}