{"ast":null,"code":"import _objectSpread from\"/Users/shawnlee/Documents/GitHub/passes-mktr/src/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";var _TemplateService;export class TemplateService{constructor(){this.templates=[];this.currentTemplate=null;this.loadTemplatesFromStorage();}static getInstance(){if(!TemplateService.instance){TemplateService.instance=new TemplateService();}return TemplateService.instance;}// Load templates from localStorage\nloadTemplatesFromStorage(){try{const stored=localStorage.getItem('passTemplates');if(stored){this.templates=JSON.parse(stored);}}catch(error){console.error('Error loading templates from storage:',error);this.templates=[];}}// Save templates to localStorage\nsaveTemplatesToStorage(){try{localStorage.setItem('passTemplates',JSON.stringify(this.templates));}catch(error){console.error('Error saving templates to storage:',error);}}// Get all templates\ngetTemplates(){return[...this.templates];}// Get template by ID\ngetTemplate(id){return this.templates.find(t=>t.id===id)||null;}// Save template\nsaveTemplate(template){const existingIndex=this.templates.findIndex(t=>t.id===template.id);if(existingIndex>=0){// Update existing template\nthis.templates[existingIndex]=_objectSpread({},template);}else{// Create new template\nconst newTemplate=_objectSpread(_objectSpread({},template),{},{id:template.id||this.generateId()});this.templates.push(newTemplate);}this.saveTemplatesToStorage();return template.id;}// Delete template\ndeleteTemplate(id){const index=this.templates.findIndex(t=>t.id===id);if(index>=0){this.templates.splice(index,1);this.saveTemplatesToStorage();return true;}return false;}// Duplicate template\nduplicateTemplate(id){const template=this.getTemplate(id);if(template){const duplicated=_objectSpread(_objectSpread({},template),{},{id:this.generateId(),name:\"\".concat(template.name,\" (Copy)\")});this.templates.push(duplicated);this.saveTemplatesToStorage();return duplicated;}return null;}// Set current template\nsetCurrentTemplate(template){this.currentTemplate=template;}// Get current template\ngetCurrentTemplate(){return this.currentTemplate;}// Create new template\ncreateNewTemplate(){const newTemplate={id:this.generateId(),name:'New Pass Template',type:'redemption',fields:{header:[],primary:[],secondary:[],auxiliary:[],back:[]},colors:{foreground:'rgb(255, 255, 255)',background:'rgb(60, 65, 76)',label:'rgb(255, 255, 255)'},images:{logo:null,icon:null,strip:null}};this.templates.push(newTemplate);this.saveTemplatesToStorage();return newTemplate;}// Generate unique ID\ngenerateId(){return Date.now().toString(36)+Math.random().toString(36).substr(2);}// Export template as JSON\nexportTemplate(id){const template=this.getTemplate(id);return template?JSON.stringify(template,null,2):null;}// Import template from JSON\nimportTemplate(jsonString){try{const template=JSON.parse(jsonString);// Validate template structure\nif(!template.name||!template.type||!template.fields||!template.colors){throw new Error('Invalid template format');}// Generate new ID to avoid conflicts\ntemplate.id=this.generateId();this.templates.push(template);this.saveTemplatesToStorage();return template;}catch(error){console.error('Error importing template:',error);return null;}}// Get template statistics\ngetTemplateStats(){const stats={total:this.templates.length,byType:{}};this.templates.forEach(template=>{stats.byType[template.type]=(stats.byType[template.type]||0)+1;});return stats;}}_TemplateService=TemplateService;TemplateService.instance=void 0;export default TemplateService.getInstance();","map":{"version":3,"names":["TemplateService","constructor","templates","currentTemplate","loadTemplatesFromStorage","getInstance","instance","stored","localStorage","getItem","JSON","parse","error","console","saveTemplatesToStorage","setItem","stringify","getTemplates","getTemplate","id","find","t","saveTemplate","template","existingIndex","findIndex","_objectSpread","newTemplate","generateId","push","deleteTemplate","index","splice","duplicateTemplate","duplicated","name","concat","setCurrentTemplate","getCurrentTemplate","createNewTemplate","type","fields","header","primary","secondary","auxiliary","back","colors","foreground","background","label","images","logo","icon","strip","Date","now","toString","Math","random","substr","exportTemplate","importTemplate","jsonString","Error","getTemplateStats","stats","total","length","byType","forEach","_TemplateService"],"sources":["/Users/shawnlee/Documents/GitHub/passes-mktr/src/frontend/src/services/templateService.ts"],"sourcesContent":["import { PassTemplate } from '../types/passTypes';\n\nexport class TemplateService {\n  private static instance: TemplateService;\n  private templates: PassTemplate[] = [];\n  private currentTemplate: PassTemplate | null = null;\n\n  constructor() {\n    this.loadTemplatesFromStorage();\n  }\n\n  static getInstance(): TemplateService {\n    if (!TemplateService.instance) {\n      TemplateService.instance = new TemplateService();\n    }\n    return TemplateService.instance;\n  }\n\n  // Load templates from localStorage\n  private loadTemplatesFromStorage(): void {\n    try {\n      const stored = localStorage.getItem('passTemplates');\n      if (stored) {\n        this.templates = JSON.parse(stored);\n      }\n    } catch (error) {\n      console.error('Error loading templates from storage:', error);\n      this.templates = [];\n    }\n  }\n\n  // Save templates to localStorage\n  private saveTemplatesToStorage(): void {\n    try {\n      localStorage.setItem('passTemplates', JSON.stringify(this.templates));\n    } catch (error) {\n      console.error('Error saving templates to storage:', error);\n    }\n  }\n\n  // Get all templates\n  getTemplates(): PassTemplate[] {\n    return [...this.templates];\n  }\n\n  // Get template by ID\n  getTemplate(id: string): PassTemplate | null {\n    return this.templates.find(t => t.id === id) || null;\n  }\n\n  // Save template\n  saveTemplate(template: PassTemplate): string {\n    const existingIndex = this.templates.findIndex(t => t.id === template.id);\n    \n    if (existingIndex >= 0) {\n      // Update existing template\n      this.templates[existingIndex] = { ...template };\n    } else {\n      // Create new template\n      const newTemplate = {\n        ...template,\n        id: template.id || this.generateId()\n      };\n      this.templates.push(newTemplate);\n    }\n\n    this.saveTemplatesToStorage();\n    return template.id;\n  }\n\n  // Delete template\n  deleteTemplate(id: string): boolean {\n    const index = this.templates.findIndex(t => t.id === id);\n    if (index >= 0) {\n      this.templates.splice(index, 1);\n      this.saveTemplatesToStorage();\n      return true;\n    }\n    return false;\n  }\n\n  // Duplicate template\n  duplicateTemplate(id: string): PassTemplate | null {\n    const template = this.getTemplate(id);\n    if (template) {\n      const duplicated = {\n        ...template,\n        id: this.generateId(),\n        name: `${template.name} (Copy)`\n      };\n      this.templates.push(duplicated);\n      this.saveTemplatesToStorage();\n      return duplicated;\n    }\n    return null;\n  }\n\n  // Set current template\n  setCurrentTemplate(template: PassTemplate | null): void {\n    this.currentTemplate = template;\n  }\n\n  // Get current template\n  getCurrentTemplate(): PassTemplate | null {\n    return this.currentTemplate;\n  }\n\n  // Create new template\n  createNewTemplate(): PassTemplate {\n    const newTemplate: PassTemplate = {\n      id: this.generateId(),\n      name: 'New Pass Template',\n      type: 'redemption',\n      fields: {\n        header: [],\n        primary: [],\n        secondary: [],\n        auxiliary: [],\n        back: []\n      },\n      colors: {\n        foreground: 'rgb(255, 255, 255)',\n        background: 'rgb(60, 65, 76)',\n        label: 'rgb(255, 255, 255)'\n      },\n      images: {\n        logo: null,\n        icon: null,\n        strip: null\n      }\n    };\n\n    this.templates.push(newTemplate);\n    this.saveTemplatesToStorage();\n    return newTemplate;\n  }\n\n  // Generate unique ID\n  private generateId(): string {\n    return Date.now().toString(36) + Math.random().toString(36).substr(2);\n  }\n\n  // Export template as JSON\n  exportTemplate(id: string): string | null {\n    const template = this.getTemplate(id);\n    return template ? JSON.stringify(template, null, 2) : null;\n  }\n\n  // Import template from JSON\n  importTemplate(jsonString: string): PassTemplate | null {\n    try {\n      const template = JSON.parse(jsonString) as PassTemplate;\n      \n      // Validate template structure\n      if (!template.name || !template.type || !template.fields || !template.colors) {\n        throw new Error('Invalid template format');\n      }\n\n      // Generate new ID to avoid conflicts\n      template.id = this.generateId();\n      \n      this.templates.push(template);\n      this.saveTemplatesToStorage();\n      return template;\n    } catch (error) {\n      console.error('Error importing template:', error);\n      return null;\n    }\n  }\n\n  // Get template statistics\n  getTemplateStats(): { total: number; byType: Record<string, number> } {\n    const stats = {\n      total: this.templates.length,\n      byType: {} as Record<string, number>\n    };\n\n    this.templates.forEach(template => {\n      stats.byType[template.type] = (stats.byType[template.type] || 0) + 1;\n    });\n\n    return stats;\n  }\n}\n\nexport default TemplateService.getInstance();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}