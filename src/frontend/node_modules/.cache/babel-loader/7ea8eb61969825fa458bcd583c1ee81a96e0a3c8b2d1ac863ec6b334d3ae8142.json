{"ast":null,"code":"// dimensionCalculator.ts\n// SOLID: Single Responsibility - Calculate strip dimensions and positioning\n\nimport { STRIP_W_1X, STRIP_H_1X } from '../shared/stripConstants';\nexport class OptimizedDimensionCalculator {\n  // Maximum stamp size\n\n  constructor(layoutCalculator) {\n    this.layoutCalculator = layoutCalculator;\n    // Default strip dimensions (Apple Wallet standard) - use shared constants\n    this.stripWidth = STRIP_W_1X;\n    this.stripHeight = STRIP_H_1X;\n    this.stripAspectRatio = this.stripWidth / this.stripHeight;\n    // 2.604\n    // Safe area configuration (matches live preview)\n    this.safeAreaRatio = 0.75;\n    // 75% of strip height\n    this.safeAreaPadding = 0.125;\n    // 12.5% top/bottom padding each\n    // Gap configuration (tiered)\n    this.baseGapPx = 6;\n    // default, overridden per tier\n    // Size constraints (tiered bounds at 1x)\n    this.minSizePx = 10;\n    // Minimum stamp size\n    this.maxSizePx = 80;\n  }\n\n  /**\n   * Calculate dimensions and positioning (matches live preview exactly)\n   */\n  calculateDimensions(stampCount, scale = 1) {\n    const {\n      rows,\n      cols\n    } = this.layoutCalculator.calculateOptimalLayout(stampCount);\n\n    // Calculate strip dimensions (matches live preview)\n    const stripHeight = this.stripHeight * scale;\n    const stripWidth = this.stripWidth * scale;\n\n    // Calculate safe area (matches live preview)\n    const safeAreaHeight = stripHeight * this.safeAreaRatio;\n    const safeAreaPadding = stripHeight * this.safeAreaPadding;\n\n    // Calculate gap (tiered)\n    let gap1x = 6;\n    if (stampCount <= 10) gap1x = 12;else if (stampCount <= 20) gap1x = 8;else gap1x = 6;\n    const adjustedGap = gap1x * scale;\n\n    // Calculate stamp diameter (matches live preview logic)\n    const availableWidth = stripWidth - (cols - 1) * adjustedGap;\n    const availableHeight = safeAreaHeight - (rows - 1) * adjustedGap;\n    const diameterFromWidth = availableWidth / cols;\n    const diameterFromHeight = availableHeight / rows;\n    const targetDiameter = Math.min(diameterFromWidth, diameterFromHeight);\n\n    // Clamp diameter (matches live preview)\n    const minSize = this.minSizePx * scale;\n    const maxSize = this.maxSizePx * scale;\n    const stampDiameter = Math.max(minSize, Math.min(maxSize, targetDiameter));\n    return {\n      rows,\n      cols,\n      stripWidth,\n      stripHeight,\n      safeAreaHeight,\n      safeAreaPadding,\n      adjustedGap,\n      stampDiameter,\n      scale\n    };\n  }\n}","map":{"version":3,"names":["STRIP_W_1X","STRIP_H_1X","OptimizedDimensionCalculator","constructor","layoutCalculator","stripWidth","stripHeight","stripAspectRatio","safeAreaRatio","safeAreaPadding","baseGapPx","minSizePx","maxSizePx","calculateDimensions","stampCount","scale","rows","cols","calculateOptimalLayout","safeAreaHeight","gap1x","adjustedGap","availableWidth","availableHeight","diameterFromWidth","diameterFromHeight","targetDiameter","Math","min","minSize","maxSize","stampDiameter","max"],"sources":["/Users/shawnlee/Documents/GitHub/passes-mktr/src/frontend/src/services/dimensionCalculator.ts"],"sourcesContent":["// dimensionCalculator.ts\n// SOLID: Single Responsibility - Calculate strip dimensions and positioning\n\nimport { StripDimensions, DimensionCalculator } from '../types/stripInterfaces';\nimport { LayoutCalculator } from '../types/stripInterfaces';\nimport { STRIP_W_1X, STRIP_H_1X } from '../shared/stripConstants';\n\nexport class OptimizedDimensionCalculator implements DimensionCalculator {\n  // Default strip dimensions (Apple Wallet standard) - use shared constants\n  private readonly stripWidth = STRIP_W_1X;\n  private readonly stripHeight = STRIP_H_1X;\n  private readonly stripAspectRatio = this.stripWidth / this.stripHeight; // 2.604\n  \n  // Safe area configuration (matches live preview)\n  private readonly safeAreaRatio = 0.75; // 75% of strip height\n  private readonly safeAreaPadding = 0.125; // 12.5% top/bottom padding each\n  \n  // Gap configuration (tiered)\n  private readonly baseGapPx = 6; // default, overridden per tier\n  \n  // Size constraints (tiered bounds at 1x)\n  private readonly minSizePx = 10; // Minimum stamp size\n  private readonly maxSizePx = 80; // Maximum stamp size\n\n  constructor(private layoutCalculator: LayoutCalculator) {}\n\n  /**\n   * Calculate dimensions and positioning (matches live preview exactly)\n   */\n  calculateDimensions(stampCount: number, scale = 1): StripDimensions {\n    const { rows, cols } = this.layoutCalculator.calculateOptimalLayout(stampCount);\n    \n    // Calculate strip dimensions (matches live preview)\n    const stripHeight = this.stripHeight * scale;\n    const stripWidth = this.stripWidth * scale;\n    \n    // Calculate safe area (matches live preview)\n    const safeAreaHeight = stripHeight * this.safeAreaRatio;\n    const safeAreaPadding = stripHeight * this.safeAreaPadding;\n    \n    // Calculate gap (tiered)\n    let gap1x = 6;\n    if (stampCount <= 10) gap1x = 12;\n    else if (stampCount <= 20) gap1x = 8;\n    else gap1x = 6;\n    const adjustedGap = gap1x * scale;\n    \n    // Calculate stamp diameter (matches live preview logic)\n    const availableWidth = stripWidth - (cols - 1) * adjustedGap;\n    const availableHeight = safeAreaHeight - (rows - 1) * adjustedGap;\n    \n    const diameterFromWidth = availableWidth / cols;\n    const diameterFromHeight = availableHeight / rows;\n    const targetDiameter = Math.min(diameterFromWidth, diameterFromHeight);\n    \n    // Clamp diameter (matches live preview)\n    const minSize = this.minSizePx * scale;\n    const maxSize = this.maxSizePx * scale;\n    const stampDiameter = Math.max(minSize, Math.min(maxSize, targetDiameter));\n    \n    return {\n      rows,\n      cols,\n      stripWidth,\n      stripHeight,\n      safeAreaHeight,\n      safeAreaPadding,\n      adjustedGap,\n      stampDiameter,\n      scale\n    };\n  }\n}\n"],"mappings":"AAAA;AACA;;AAIA,SAASA,UAAU,EAAEC,UAAU,QAAQ,0BAA0B;AAEjE,OAAO,MAAMC,4BAA4B,CAAgC;EAetC;;EAEjCC,WAAWA,CAASC,gBAAkC,EAAE;IAAA,KAApCA,gBAAkC,GAAlCA,gBAAkC;IAhBtD;IAAA,KACiBC,UAAU,GAAGL,UAAU;IAAA,KACvBM,WAAW,GAAGL,UAAU;IAAA,KACxBM,gBAAgB,GAAG,IAAI,CAACF,UAAU,GAAG,IAAI,CAACC,WAAW;IAAE;IAExE;IAAA,KACiBE,aAAa,GAAG,IAAI;IAAE;IAAA,KACtBC,eAAe,GAAG,KAAK;IAAE;IAE1C;IAAA,KACiBC,SAAS,GAAG,CAAC;IAAE;IAEhC;IAAA,KACiBC,SAAS,GAAG,EAAE;IAAE;IAAA,KAChBC,SAAS,GAAG,EAAE;EAE0B;;EAEzD;AACF;AACA;EACEC,mBAAmBA,CAACC,UAAkB,EAAEC,KAAK,GAAG,CAAC,EAAmB;IAClE,MAAM;MAAEC,IAAI;MAAEC;IAAK,CAAC,GAAG,IAAI,CAACb,gBAAgB,CAACc,sBAAsB,CAACJ,UAAU,CAAC;;IAE/E;IACA,MAAMR,WAAW,GAAG,IAAI,CAACA,WAAW,GAAGS,KAAK;IAC5C,MAAMV,UAAU,GAAG,IAAI,CAACA,UAAU,GAAGU,KAAK;;IAE1C;IACA,MAAMI,cAAc,GAAGb,WAAW,GAAG,IAAI,CAACE,aAAa;IACvD,MAAMC,eAAe,GAAGH,WAAW,GAAG,IAAI,CAACG,eAAe;;IAE1D;IACA,IAAIW,KAAK,GAAG,CAAC;IACb,IAAIN,UAAU,IAAI,EAAE,EAAEM,KAAK,GAAG,EAAE,CAAC,KAC5B,IAAIN,UAAU,IAAI,EAAE,EAAEM,KAAK,GAAG,CAAC,CAAC,KAChCA,KAAK,GAAG,CAAC;IACd,MAAMC,WAAW,GAAGD,KAAK,GAAGL,KAAK;;IAEjC;IACA,MAAMO,cAAc,GAAGjB,UAAU,GAAG,CAACY,IAAI,GAAG,CAAC,IAAII,WAAW;IAC5D,MAAME,eAAe,GAAGJ,cAAc,GAAG,CAACH,IAAI,GAAG,CAAC,IAAIK,WAAW;IAEjE,MAAMG,iBAAiB,GAAGF,cAAc,GAAGL,IAAI;IAC/C,MAAMQ,kBAAkB,GAAGF,eAAe,GAAGP,IAAI;IACjD,MAAMU,cAAc,GAAGC,IAAI,CAACC,GAAG,CAACJ,iBAAiB,EAAEC,kBAAkB,CAAC;;IAEtE;IACA,MAAMI,OAAO,GAAG,IAAI,CAAClB,SAAS,GAAGI,KAAK;IACtC,MAAMe,OAAO,GAAG,IAAI,CAAClB,SAAS,GAAGG,KAAK;IACtC,MAAMgB,aAAa,GAAGJ,IAAI,CAACK,GAAG,CAACH,OAAO,EAAEF,IAAI,CAACC,GAAG,CAACE,OAAO,EAAEJ,cAAc,CAAC,CAAC;IAE1E,OAAO;MACLV,IAAI;MACJC,IAAI;MACJZ,UAAU;MACVC,WAAW;MACXa,cAAc;MACdV,eAAe;MACfY,WAAW;MACXU,aAAa;MACbhB;IACF,CAAC;EACH;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}