{"ast":null,"code":"// previewCapture.ts\n// SOLID: Single Responsibility - Capture live preview elements\n\nimport html2canvas from 'html2canvas';\nexport class CanvasPreviewCapture {\n  /**\n   * Capture strip element using html2canvas\n   */\n  async captureStripElement(element) {\n    try {\n      console.log('ðŸ“¸ Capturing live preview strip...');\n\n      // Ensure debug overlays are hidden during capture\n      window.__CAPTURE_MODE__ = true;\n\n      // Use html2canvas to capture the strip element\n      const canvas = await html2canvas(element, {\n        useCORS: true,\n        // Allow cross-origin images\n        allowTaint: true,\n        // Allow tainted canvas\n        logging: false // Disable console logging\n      });\n\n      // Convert canvas to base64 data URL\n      const dataURL = canvas.toDataURL('image/png');\n      console.log('âœ… Live preview strip captured successfully');\n      console.log('ðŸ“Š Canvas dimensions:', canvas.width, 'x', canvas.height);\n      console.log('ðŸ“Š Data URL length:', dataURL.length);\n\n      // Reset capture flag\n      delete window.__CAPTURE_MODE__;\n      return dataURL;\n    } catch (error) {\n      console.error('Error capturing live preview strip:', error);\n      throw error;\n    }\n  }\n}","map":{"version":3,"names":["html2canvas","CanvasPreviewCapture","captureStripElement","element","console","log","window","__CAPTURE_MODE__","canvas","useCORS","allowTaint","logging","dataURL","toDataURL","width","height","length","error"],"sources":["/Users/shawnlee/Documents/GitHub/passes-mktr/src/frontend/src/services/previewCapture.ts"],"sourcesContent":["// previewCapture.ts\n// SOLID: Single Responsibility - Capture live preview elements\n\nimport { PreviewCapture } from '../types/stripInterfaces';\nimport html2canvas from 'html2canvas';\n\nexport class CanvasPreviewCapture implements PreviewCapture {\n  /**\n   * Capture strip element using html2canvas\n   */\n  async captureStripElement(element: HTMLElement): Promise<string> {\n    try {\n      console.log('ðŸ“¸ Capturing live preview strip...');\n      \n      // Ensure debug overlays are hidden during capture\n      (window as any).__CAPTURE_MODE__ = true;\n\n      // Use html2canvas to capture the strip element\n      const canvas = await html2canvas(element, {\n        useCORS: true, // Allow cross-origin images\n        allowTaint: true, // Allow tainted canvas\n        logging: false // Disable console logging\n      });\n      \n      // Convert canvas to base64 data URL\n      const dataURL = canvas.toDataURL('image/png');\n      console.log('âœ… Live preview strip captured successfully');\n      console.log('ðŸ“Š Canvas dimensions:', canvas.width, 'x', canvas.height);\n      console.log('ðŸ“Š Data URL length:', dataURL.length);\n      \n      // Reset capture flag\n      delete (window as any).__CAPTURE_MODE__;\n\n      return dataURL;\n    } catch (error) {\n      console.error('Error capturing live preview strip:', error);\n      throw error;\n    }\n  }\n}\n"],"mappings":"AAAA;AACA;;AAGA,OAAOA,WAAW,MAAM,aAAa;AAErC,OAAO,MAAMC,oBAAoB,CAA2B;EAC1D;AACF;AACA;EACE,MAAMC,mBAAmBA,CAACC,OAAoB,EAAmB;IAC/D,IAAI;MACFC,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;;MAEjD;MACCC,MAAM,CAASC,gBAAgB,GAAG,IAAI;;MAEvC;MACA,MAAMC,MAAM,GAAG,MAAMR,WAAW,CAACG,OAAO,EAAE;QACxCM,OAAO,EAAE,IAAI;QAAE;QACfC,UAAU,EAAE,IAAI;QAAE;QAClBC,OAAO,EAAE,KAAK,CAAC;MACjB,CAAC,CAAC;;MAEF;MACA,MAAMC,OAAO,GAAGJ,MAAM,CAACK,SAAS,CAAC,WAAW,CAAC;MAC7CT,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC;MACzDD,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEG,MAAM,CAACM,KAAK,EAAE,GAAG,EAAEN,MAAM,CAACO,MAAM,CAAC;MACtEX,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEO,OAAO,CAACI,MAAM,CAAC;;MAElD;MACA,OAAQV,MAAM,CAASC,gBAAgB;MAEvC,OAAOK,OAAO;IAChB,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdb,OAAO,CAACa,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC3D,MAAMA,KAAK;IACb;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}