{"ast":null,"code":"var _VariableService;export class VariableService{constructor(){}static getInstance(){if(!VariableService.instance){VariableService.instance=new VariableService();}return VariableService.instance;}// Get all variable categories\ngetVariableCategories(){return[{name:'Customer Information',description:'Customer-related data and personal information',variables:[{key:'customerName',label:'Customer Name',description:'Full name of the customer',type:'string',required:true,category:'Customer Information',examples:['John Doe','Jane Smith']},{key:'customerEmail',label:'Customer Email',description:'Email address of the customer',type:'string',required:true,validation:{pattern:'^[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+$',message:'Please enter a valid email address'},category:'Customer Information',examples:['john@example.com','jane@company.com']},{key:'customerId',label:'Customer ID',description:'Unique identifier for the customer',type:'string',required:true,category:'Customer Information',examples:['CUST-12345','USER-67890']},{key:'customerPhone',label:'Customer Phone',description:'Phone number of the customer',type:'string',category:'Customer Information',examples:['+1-555-123-4567','+65-9123-4567']}]},{name:'Campaign Information',description:'Campaign and program-related data',variables:[{key:'campaignId',label:'Campaign ID',description:'Unique identifier for the campaign',type:'string',required:true,category:'Campaign Information',examples:['CAMP-001','LOYALTY-2024']},{key:'campaignName',label:'Campaign Name',description:'Name of the loyalty campaign',type:'string',required:true,category:'Campaign Information',examples:['Coffee Loyalty Program','Retail Rewards']},{key:'tenantName',label:'Company Name',description:'Name of the company or organization',type:'string',required:true,category:'Campaign Information',examples:['Coffee Corner','Fashion Store']},{key:'programType',label:'Program Type',description:'Type of loyalty program',type:'string',category:'Campaign Information',examples:['Stamps','Points','Tiers']}]},{name:'Loyalty Data',description:'Loyalty program specific data',variables:[{key:'stampsEarned',label:'Stamps Earned',description:'Number of stamps currently earned',type:'number',defaultValue:0,validation:{min:0,message:'Stamps earned cannot be negative'},category:'Loyalty Data',examples:['0','5','10']},{key:'stampsRequired',label:'Stamps Required',description:'Total number of stamps required for reward',type:'number',defaultValue:10,validation:{min:1,message:'Stamps required must be at least 1'},category:'Loyalty Data',examples:['10','20','50']},{key:'pointsEarned',label:'Points Earned',description:'Number of points currently earned',type:'number',defaultValue:0,validation:{min:0,message:'Points earned cannot be negative'},category:'Loyalty Data',examples:['0','150','500']},{key:'pointsRequired',label:'Points Required',description:'Number of points required for next reward',type:'number',defaultValue:100,validation:{min:1,message:'Points required must be at least 1'},category:'Loyalty Data',examples:['100','500','1000']},{key:'membershipTier',label:'Membership Tier',description:'Current membership tier level',type:'string',category:'Loyalty Data',examples:['Bronze','Silver','Gold','Platinum']}]},{name:'Transaction Data',description:'Purchase and transaction information',variables:[{key:'spendAmount',label:'Spend Amount',description:'Amount spent in the current transaction',type:'currency',defaultValue:0,validation:{min:0,message:'Spend amount cannot be negative'},category:'Transaction Data',examples:['$5.50','$25.00','$100.00']},{key:'totalSpent',label:'Total Spent',description:'Total amount spent in the program',type:'currency',defaultValue:0,validation:{min:0,message:'Total spent cannot be negative'},category:'Transaction Data',examples:['$50.00','$250.00','$1000.00']},{key:'transactionId',label:'Transaction ID',description:'Unique identifier for the transaction',type:'string',category:'Transaction Data',examples:['TXN-12345','ORDER-67890']},{key:'storeLocation',label:'Store Location',description:'Location where the transaction occurred',type:'string',category:'Transaction Data',examples:['Downtown Store','Mall Branch','Online']}]},{name:'Rewards & Offers',description:'Reward and offer information',variables:[{key:'nextReward',label:'Next Reward',description:'Description of the next available reward',type:'string',category:'Rewards & Offers',examples:['Free Coffee','10% Discount','Free Shipping']},{key:'currentOffer',label:'Current Offer',description:'Currently active offer or promotion',type:'string',category:'Rewards & Offers',examples:['Buy 2 Get 1 Free','20% Off Today','Free Gift with Purchase']},{key:'rewardValue',label:'Reward Value',description:'Monetary value of the reward',type:'currency',category:'Rewards & Offers',examples:['$5.00','$10.00','$25.00']}]},{name:'Dates & Time',description:'Date and time related information',variables:[{key:'expiryDate',label:'Expiry Date',description:'Date when the pass or reward expires',type:'date',category:'Dates & Time',examples:['2024-12-31','2025-06-30']},{key:'issueDate',label:'Issue Date',description:'Date when the pass was issued',type:'date',category:'Dates & Time',examples:['2024-01-01','2024-06-15']},{key:'lastVisit',label:'Last Visit',description:'Date of the last visit or transaction',type:'date',category:'Dates & Time',examples:['2024-01-15','2024-02-01']}]},{name:'System Data',description:'System-generated and technical data',variables:[{key:'passId',label:'Pass ID',description:'Unique identifier for the pass',type:'string',required:true,category:'System Data',examples:['PASS-12345','CARD-67890']},{key:'serialNumber',label:'Serial Number',description:'Serial number of the pass',type:'string',required:true,category:'System Data',examples:['SN-001','SERIAL-12345']},{key:'version',label:'Version',description:'Version of the pass template',type:'string',category:'System Data',examples:['1.0','2.1','3.0']}]}];}// Get all variables\ngetAllVariables(){return this.getVariableCategories().flatMap(category=>category.variables);}// Get variables by category\ngetVariablesByCategory(categoryName){const category=this.getVariableCategories().find(cat=>cat.name===categoryName);return category?category.variables:[];}// Get variable by key\ngetVariableByKey(key){return this.getAllVariables().find(variable=>variable.key===key)||null;}// Search variables\nsearchVariables(query){const lowercaseQuery=query.toLowerCase();return this.getAllVariables().filter(variable=>variable.key.toLowerCase().includes(lowercaseQuery)||variable.label.toLowerCase().includes(lowercaseQuery)||variable.description.toLowerCase().includes(lowercaseQuery));}// Validate variable value\nvalidateVariableValue(variable,value){if(variable.required&&(value===null||value===undefined||value==='')){return{isValid:false,message:\"\".concat(variable.label,\" is required\")};}if(value===null||value===undefined||value===''){return{isValid:true};}if(variable.validation){const{min,max,pattern}=variable.validation;if(min!==undefined&&typeof value==='number'&&value<min){return{isValid:false,message:variable.validation.message||\"\".concat(variable.label,\" must be at least \").concat(min)};}if(max!==undefined&&typeof value==='number'&&value>max){return{isValid:false,message:variable.validation.message||\"\".concat(variable.label,\" must be at most \").concat(max)};}if(pattern&&typeof value==='string'&&!new RegExp(pattern).test(value)){return{isValid:false,message:variable.validation.message||\"\".concat(variable.label,\" format is invalid\")};}}return{isValid:true};}// Format variable value for display\nformatVariableValue(variable,value){if(value===null||value===undefined){return variable.defaultValue||'';}switch(variable.type){case'currency':return typeof value==='number'?\"$\".concat(value.toFixed(2)):value;case'percentage':return typeof value==='number'?\"\".concat(value,\"%\"):value;case'date':return value instanceof Date?value.toLocaleDateString():value;case'number':return typeof value==='number'?value.toString():value;default:return String(value);}}// Parse variable value from string\nparseVariableValue(variable,value){if(!value||value===''){return variable.defaultValue||null;}switch(variable.type){case'number':case'currency':const num=parseFloat(value.replace(/[^0-9.-]/g,''));return isNaN(num)?variable.defaultValue||0:num;case'date':const date=new Date(value);return isNaN(date.getTime())?variable.defaultValue||null:date;case'boolean':return value.toLowerCase()==='true'||value==='1';default:return value;}}// Get variable suggestions for a given context\ngetVariableSuggestions(context){const lowercaseContext=context.toLowerCase();if(lowercaseContext.includes('name')||lowercaseContext.includes('customer')){return this.getVariablesByCategory('Customer Information');}if(lowercaseContext.includes('campaign')||lowercaseContext.includes('program')){return this.getVariablesByCategory('Campaign Information');}if(lowercaseContext.includes('stamp')||lowercaseContext.includes('point')||lowercaseContext.includes('loyalty')){return this.getVariablesByCategory('Loyalty Data');}if(lowercaseContext.includes('spend')||lowercaseContext.includes('purchase')||lowercaseContext.includes('transaction')){return this.getVariablesByCategory('Transaction Data');}if(lowercaseContext.includes('reward')||lowercaseContext.includes('offer')){return this.getVariablesByCategory('Rewards & Offers');}if(lowercaseContext.includes('date')||lowercaseContext.includes('time')||lowercaseContext.includes('expire')){return this.getVariablesByCategory('Dates & Time');}return this.getAllVariables();}}_VariableService=VariableService;VariableService.instance=void 0;export default VariableService.getInstance();","map":{"version":3,"names":["VariableService","constructor","getInstance","instance","getVariableCategories","name","description","variables","key","label","type","required","category","examples","validation","pattern","message","defaultValue","min","getAllVariables","flatMap","getVariablesByCategory","categoryName","find","cat","getVariableByKey","variable","searchVariables","query","lowercaseQuery","toLowerCase","filter","includes","validateVariableValue","value","undefined","isValid","concat","max","RegExp","test","formatVariableValue","toFixed","Date","toLocaleDateString","toString","String","parseVariableValue","num","parseFloat","replace","isNaN","date","getTime","getVariableSuggestions","context","lowercaseContext","_VariableService"],"sources":["/Users/shawnlee/Documents/GitHub/passes-mktr/src/frontend/src/services/variableService.ts"],"sourcesContent":["export interface Variable {\n  key: string;\n  label: string;\n  description: string;\n  type: 'string' | 'number' | 'date' | 'currency' | 'percentage' | 'boolean';\n  defaultValue?: any;\n  required?: boolean;\n  validation?: {\n    min?: number;\n    max?: number;\n    pattern?: string;\n    message?: string;\n  };\n  category: string;\n  examples?: string[];\n}\n\nexport interface VariableCategory {\n  name: string;\n  description: string;\n  variables: Variable[];\n}\n\nexport class VariableService {\n  private static instance: VariableService;\n\n  constructor() {}\n\n  static getInstance(): VariableService {\n    if (!VariableService.instance) {\n      VariableService.instance = new VariableService();\n    }\n    return VariableService.instance;\n  }\n\n  // Get all variable categories\n  getVariableCategories(): VariableCategory[] {\n    return [\n      {\n        name: 'Customer Information',\n        description: 'Customer-related data and personal information',\n        variables: [\n          {\n            key: 'customerName',\n            label: 'Customer Name',\n            description: 'Full name of the customer',\n            type: 'string',\n            required: true,\n            category: 'Customer Information',\n            examples: ['John Doe', 'Jane Smith']\n          },\n          {\n            key: 'customerEmail',\n            label: 'Customer Email',\n            description: 'Email address of the customer',\n            type: 'string',\n            required: true,\n            validation: {\n              pattern: '^[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+$',\n              message: 'Please enter a valid email address'\n            },\n            category: 'Customer Information',\n            examples: ['john@example.com', 'jane@company.com']\n          },\n          {\n            key: 'customerId',\n            label: 'Customer ID',\n            description: 'Unique identifier for the customer',\n            type: 'string',\n            required: true,\n            category: 'Customer Information',\n            examples: ['CUST-12345', 'USER-67890']\n          },\n          {\n            key: 'customerPhone',\n            label: 'Customer Phone',\n            description: 'Phone number of the customer',\n            type: 'string',\n            category: 'Customer Information',\n            examples: ['+1-555-123-4567', '+65-9123-4567']\n          }\n        ]\n      },\n      {\n        name: 'Campaign Information',\n        description: 'Campaign and program-related data',\n        variables: [\n          {\n            key: 'campaignId',\n            label: 'Campaign ID',\n            description: 'Unique identifier for the campaign',\n            type: 'string',\n            required: true,\n            category: 'Campaign Information',\n            examples: ['CAMP-001', 'LOYALTY-2024']\n          },\n          {\n            key: 'campaignName',\n            label: 'Campaign Name',\n            description: 'Name of the loyalty campaign',\n            type: 'string',\n            required: true,\n            category: 'Campaign Information',\n            examples: ['Coffee Loyalty Program', 'Retail Rewards']\n          },\n          {\n            key: 'tenantName',\n            label: 'Company Name',\n            description: 'Name of the company or organization',\n            type: 'string',\n            required: true,\n            category: 'Campaign Information',\n            examples: ['Coffee Corner', 'Fashion Store']\n          },\n          {\n            key: 'programType',\n            label: 'Program Type',\n            description: 'Type of loyalty program',\n            type: 'string',\n            category: 'Campaign Information',\n            examples: ['Stamps', 'Points', 'Tiers']\n          }\n        ]\n      },\n      {\n        name: 'Loyalty Data',\n        description: 'Loyalty program specific data',\n        variables: [\n          {\n            key: 'stampsEarned',\n            label: 'Stamps Earned',\n            description: 'Number of stamps currently earned',\n            type: 'number',\n            defaultValue: 0,\n            validation: {\n              min: 0,\n              message: 'Stamps earned cannot be negative'\n            },\n            category: 'Loyalty Data',\n            examples: ['0', '5', '10']\n          },\n          {\n            key: 'stampsRequired',\n            label: 'Stamps Required',\n            description: 'Total number of stamps required for reward',\n            type: 'number',\n            defaultValue: 10,\n            validation: {\n              min: 1,\n              message: 'Stamps required must be at least 1'\n            },\n            category: 'Loyalty Data',\n            examples: ['10', '20', '50']\n          },\n          {\n            key: 'pointsEarned',\n            label: 'Points Earned',\n            description: 'Number of points currently earned',\n            type: 'number',\n            defaultValue: 0,\n            validation: {\n              min: 0,\n              message: 'Points earned cannot be negative'\n            },\n            category: 'Loyalty Data',\n            examples: ['0', '150', '500']\n          },\n          {\n            key: 'pointsRequired',\n            label: 'Points Required',\n            description: 'Number of points required for next reward',\n            type: 'number',\n            defaultValue: 100,\n            validation: {\n              min: 1,\n              message: 'Points required must be at least 1'\n            },\n            category: 'Loyalty Data',\n            examples: ['100', '500', '1000']\n          },\n          {\n            key: 'membershipTier',\n            label: 'Membership Tier',\n            description: 'Current membership tier level',\n            type: 'string',\n            category: 'Loyalty Data',\n            examples: ['Bronze', 'Silver', 'Gold', 'Platinum']\n          }\n        ]\n      },\n      {\n        name: 'Transaction Data',\n        description: 'Purchase and transaction information',\n        variables: [\n          {\n            key: 'spendAmount',\n            label: 'Spend Amount',\n            description: 'Amount spent in the current transaction',\n            type: 'currency',\n            defaultValue: 0,\n            validation: {\n              min: 0,\n              message: 'Spend amount cannot be negative'\n            },\n            category: 'Transaction Data',\n            examples: ['$5.50', '$25.00', '$100.00']\n          },\n          {\n            key: 'totalSpent',\n            label: 'Total Spent',\n            description: 'Total amount spent in the program',\n            type: 'currency',\n            defaultValue: 0,\n            validation: {\n              min: 0,\n              message: 'Total spent cannot be negative'\n            },\n            category: 'Transaction Data',\n            examples: ['$50.00', '$250.00', '$1000.00']\n          },\n          {\n            key: 'transactionId',\n            label: 'Transaction ID',\n            description: 'Unique identifier for the transaction',\n            type: 'string',\n            category: 'Transaction Data',\n            examples: ['TXN-12345', 'ORDER-67890']\n          },\n          {\n            key: 'storeLocation',\n            label: 'Store Location',\n            description: 'Location where the transaction occurred',\n            type: 'string',\n            category: 'Transaction Data',\n            examples: ['Downtown Store', 'Mall Branch', 'Online']\n          }\n        ]\n      },\n      {\n        name: 'Rewards & Offers',\n        description: 'Reward and offer information',\n        variables: [\n          {\n            key: 'nextReward',\n            label: 'Next Reward',\n            description: 'Description of the next available reward',\n            type: 'string',\n            category: 'Rewards & Offers',\n            examples: ['Free Coffee', '10% Discount', 'Free Shipping']\n          },\n          {\n            key: 'currentOffer',\n            label: 'Current Offer',\n            description: 'Currently active offer or promotion',\n            type: 'string',\n            category: 'Rewards & Offers',\n            examples: ['Buy 2 Get 1 Free', '20% Off Today', 'Free Gift with Purchase']\n          },\n          {\n            key: 'rewardValue',\n            label: 'Reward Value',\n            description: 'Monetary value of the reward',\n            type: 'currency',\n            category: 'Rewards & Offers',\n            examples: ['$5.00', '$10.00', '$25.00']\n          }\n        ]\n      },\n      {\n        name: 'Dates & Time',\n        description: 'Date and time related information',\n        variables: [\n          {\n            key: 'expiryDate',\n            label: 'Expiry Date',\n            description: 'Date when the pass or reward expires',\n            type: 'date',\n            category: 'Dates & Time',\n            examples: ['2024-12-31', '2025-06-30']\n          },\n          {\n            key: 'issueDate',\n            label: 'Issue Date',\n            description: 'Date when the pass was issued',\n            type: 'date',\n            category: 'Dates & Time',\n            examples: ['2024-01-01', '2024-06-15']\n          },\n          {\n            key: 'lastVisit',\n            label: 'Last Visit',\n            description: 'Date of the last visit or transaction',\n            type: 'date',\n            category: 'Dates & Time',\n            examples: ['2024-01-15', '2024-02-01']\n          }\n        ]\n      },\n      {\n        name: 'System Data',\n        description: 'System-generated and technical data',\n        variables: [\n          {\n            key: 'passId',\n            label: 'Pass ID',\n            description: 'Unique identifier for the pass',\n            type: 'string',\n            required: true,\n            category: 'System Data',\n            examples: ['PASS-12345', 'CARD-67890']\n          },\n          {\n            key: 'serialNumber',\n            label: 'Serial Number',\n            description: 'Serial number of the pass',\n            type: 'string',\n            required: true,\n            category: 'System Data',\n            examples: ['SN-001', 'SERIAL-12345']\n          },\n          {\n            key: 'version',\n            label: 'Version',\n            description: 'Version of the pass template',\n            type: 'string',\n            category: 'System Data',\n            examples: ['1.0', '2.1', '3.0']\n          }\n        ]\n      }\n    ];\n  }\n\n  // Get all variables\n  getAllVariables(): Variable[] {\n    return this.getVariableCategories().flatMap(category => category.variables);\n  }\n\n  // Get variables by category\n  getVariablesByCategory(categoryName: string): Variable[] {\n    const category = this.getVariableCategories().find(cat => cat.name === categoryName);\n    return category ? category.variables : [];\n  }\n\n  // Get variable by key\n  getVariableByKey(key: string): Variable | null {\n    return this.getAllVariables().find(variable => variable.key === key) || null;\n  }\n\n  // Search variables\n  searchVariables(query: string): Variable[] {\n    const lowercaseQuery = query.toLowerCase();\n    return this.getAllVariables().filter(variable =>\n      variable.key.toLowerCase().includes(lowercaseQuery) ||\n      variable.label.toLowerCase().includes(lowercaseQuery) ||\n      variable.description.toLowerCase().includes(lowercaseQuery)\n    );\n  }\n\n  // Validate variable value\n  validateVariableValue(variable: Variable, value: any): { isValid: boolean; message?: string } {\n    if (variable.required && (value === null || value === undefined || value === '')) {\n      return {\n        isValid: false,\n        message: `${variable.label} is required`\n      };\n    }\n\n    if (value === null || value === undefined || value === '') {\n      return { isValid: true };\n    }\n\n    if (variable.validation) {\n      const { min, max, pattern } = variable.validation;\n\n      if (min !== undefined && typeof value === 'number' && value < min) {\n        return {\n          isValid: false,\n          message: variable.validation.message || `${variable.label} must be at least ${min}`\n        };\n      }\n\n      if (max !== undefined && typeof value === 'number' && value > max) {\n        return {\n          isValid: false,\n          message: variable.validation.message || `${variable.label} must be at most ${max}`\n        };\n      }\n\n      if (pattern && typeof value === 'string' && !new RegExp(pattern).test(value)) {\n        return {\n          isValid: false,\n          message: variable.validation.message || `${variable.label} format is invalid`\n        };\n      }\n    }\n\n    return { isValid: true };\n  }\n\n  // Format variable value for display\n  formatVariableValue(variable: Variable, value: any): string {\n    if (value === null || value === undefined) {\n      return variable.defaultValue || '';\n    }\n\n    switch (variable.type) {\n      case 'currency':\n        return typeof value === 'number' ? `$${value.toFixed(2)}` : value;\n      case 'percentage':\n        return typeof value === 'number' ? `${value}%` : value;\n      case 'date':\n        return value instanceof Date ? value.toLocaleDateString() : value;\n      case 'number':\n        return typeof value === 'number' ? value.toString() : value;\n      default:\n        return String(value);\n    }\n  }\n\n  // Parse variable value from string\n  parseVariableValue(variable: Variable, value: string): any {\n    if (!value || value === '') {\n      return variable.defaultValue || null;\n    }\n\n    switch (variable.type) {\n      case 'number':\n      case 'currency':\n        const num = parseFloat(value.replace(/[^0-9.-]/g, ''));\n        return isNaN(num) ? variable.defaultValue || 0 : num;\n      case 'date':\n        const date = new Date(value);\n        return isNaN(date.getTime()) ? variable.defaultValue || null : date;\n      case 'boolean':\n        return value.toLowerCase() === 'true' || value === '1';\n      default:\n        return value;\n    }\n  }\n\n  // Get variable suggestions for a given context\n  getVariableSuggestions(context: string): Variable[] {\n    const lowercaseContext = context.toLowerCase();\n    \n    if (lowercaseContext.includes('name') || lowercaseContext.includes('customer')) {\n      return this.getVariablesByCategory('Customer Information');\n    }\n    \n    if (lowercaseContext.includes('campaign') || lowercaseContext.includes('program')) {\n      return this.getVariablesByCategory('Campaign Information');\n    }\n    \n    if (lowercaseContext.includes('stamp') || lowercaseContext.includes('point') || lowercaseContext.includes('loyalty')) {\n      return this.getVariablesByCategory('Loyalty Data');\n    }\n    \n    if (lowercaseContext.includes('spend') || lowercaseContext.includes('purchase') || lowercaseContext.includes('transaction')) {\n      return this.getVariablesByCategory('Transaction Data');\n    }\n    \n    if (lowercaseContext.includes('reward') || lowercaseContext.includes('offer')) {\n      return this.getVariablesByCategory('Rewards & Offers');\n    }\n    \n    if (lowercaseContext.includes('date') || lowercaseContext.includes('time') || lowercaseContext.includes('expire')) {\n      return this.getVariablesByCategory('Dates & Time');\n    }\n    \n    return this.getAllVariables();\n  }\n}\n\nexport default VariableService.getInstance();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}